name: Create release branch (new)

on:
  workflow_dispatch:
    inputs:
      release_type:
        type: choice
        required: true
        description: "Release type"
        options:
          - "minor"
          - "hotfix"
          - "major"

jobs:
  check_version:
    name: Set next project version based on type of release
    runs-on: ubuntu-20.04
    outputs:
      current_version: ${{ steps.set_new_version.outputs.current_version }}
      new_version: ${{ steps.set_new_version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Node Setup
        uses: ./.github/actions/setup-node
      - name: Set new version
        id: set_new_version
        shell: bash
        run: |
          ver="$(node -p "require('./package.json').version")"
          release_type="${{ inputs.release_type }}"
          new_ver="$(npx semver -i $release_type $ver)"
          echo "::set-output name=current_version::$ver"
          echo "::set-output name=new_version::$new_ver"
      - name: Finish process
        run: |
          echo "### Success ✅" >> $GITHUB_STEP_SUMMARY
          echo "Release type: ${{ inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "Given the current version (${{ steps.set_new_version.outputs.current_version }}), the new version candidate for the release is ${{ steps.set_new_version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
  create_pr:
    needs: [check_version]
    name: Create Pull Request
    runs-on: ubuntu-20.04
    steps:
      - name: Select branch based on release type
        run: |
          if ( ${{ inputs.release_type != 'hotfix' }} ); then
              echo "branch=develop" >> "$GITHUB_ENV"
          else
              echo "branch=${{ github.ref }}" >> "$GITHUB_ENV"
          fi
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ env.branch }}
      - name: Configure Git credentials
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
      - name: Update branch with master
        id: update_branch
        run: |
          git merge origin/master
        continue-on-error: true
      - name: Check merge failures
        if: steps.update_branch.outcome != 'success'
        run: |
          echo "### Failure ❌" >> $GITHUB_STEP_SUMMARY
          echo "### There was an error during the merge process. This usually means that the destination branch is ahead and cannot be fast-forwarded. Please try again or run the process manually instead" >> $GITHUB_STEP_SUMMARY
      - name: Upgrade version
        run: |
          npm version ${{ needs.check_version.outputs.new_version }} --allow-same-version
      - name: Create Pull Request
        id: create_pull_request
        uses: peter-evans/create-pull-request@v4
        with:
          title: "Release v${{ needs.check_version.outputs.new_version }}"
          base: master
          branch: release/v${{ needs.check_version.outputs.new_version }}
          body: v${{ needs.check_version.outputs.new_version }}
          labels: |
            'release'
            'automated'
            'v${{ needs.check_version.outputs.new_version }}'
            '${{ inputs.release_type }}'
        continue-on-error: true
      - name: Check merge failures
        if: steps.update_branch.outcome != 'success'
        run: |
          echo "### Failure ❌" >> $GITHUB_STEP_SUMMARY
          echo "### There was an error during the Pull Request creation. Please try again or run the process manually instead" >> $GITHUB_STEP_SUMMARY
      - name: Finish PR (Created)
        if: ${{ steps.create_pull_request.outputs.pull-request-number && steps.create_pull_request.outputs.pull-request-operation == 'created' }}
        run: |
          echo "### Success ✅" >> $GITHUB_STEP_SUMMARY
          echo "Pull Request created" >> $GITHUB_STEP_SUMMARY
          echo "Pull Request Number - ${{ steps.create_pull_request.outputs.pull-request-number }}" >> $GITHUB_STEP_SUMMARY
          echo "Pull Request URL - ${{ steps.create_pull_request.outputs.pull-request-url }}" >> $GITHUB_STEP_SUMMARY
      - name: Finish PR (Updated)
        if: ${{ steps.create_pull_request.outputs.pull-request-number && steps.create_pull_request.outputs.pull-request-operation == 'updated' }}
        run: |
          echo "### Success ✅" >> $GITHUB_STEP_SUMMARY
          echo "The Pull Request already exists and has been updated" >> $GITHUB_STEP_SUMMARY
          echo "Pull Request Number - ${{ steps.create_pull_request.outputs.pull-request-number }}" >> $GITHUB_STEP_SUMMARY
          echo "Pull Request URL - ${{ steps.create_pull_request.outputs.pull-request-url }}" >> $GITHUB_STEP_SUMMARY
  update_translations:
    name: Update Translations
    needs: [check_version, create_pr]
    uses: ./.github/workflows/update-translations.yml
    with:
      change_type: "commit"
      branch: "release/v${{ needs.check_version.outputs.new_version }}"
