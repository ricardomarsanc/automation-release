name: Create release branch

on:
  workflow_dispatch:
    inputs:
      versionName:
        required: true
        description: "Enter the new version number"

jobs:
  current-version:
    runs-on: ubuntu-20.04
    outputs:
      stop: ${{ steps.vars.outputs.stop }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Node Setup
        uses: ./.github/actions/setup-node
      - name: Set version as output
        id: vars
        shell: bash
        run: |
          ver=`grep version package.json`
          newver='${{ github.event.inputs.versionName }}'
          stopWorkflow=false
          if [ "$(printf '%s\n' "$ver" "$newver" | sort -V | head -n1)" = "$ver" ]; then 
            if [ "$(printf '%s\n' "$ver")" = "$newver" ]; then 
              echo "Equal"
              stopWorkflow=true
            else
              echo "Greater"
            fi
          else
            echo "Less than ${ver}"
            stopWorkflow=true
          fi
          echo "::set-output name=stop::$stopWorkflow"
  another-job:
    needs: [current-version]
    if: needs.current-version.outputs.stop != 'false'
    runs-on: ubuntu-20.04
    steps:
      - name: Echo
        run: echo "Hello"

  # create-release:
  #   # needs: [current-version]
  #   runs-on: ubuntu-20.04
  #   # if: github.event.inputs.versionName >= needs.current-version.outputs.version
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Node Setup
  #       uses: ./.github/actions/setup-node
  #     - name: Create release branch
  #       run: |
  #         git config user.email "${{ github.actor }}@users.noreply.github.com"
  #         git config user.name "${{ github.actor }}"
  #         git fetch --all
  #         git checkout -B release/v${{ github.event.inputs.versionName }} origin/develop
  #         git merge origin/master
  #         npm version ${{ github.event.inputs.versionName }} --allow-same-version
  #         git push --force origin release/v${{ github.event.inputs.versionName }}
  #     - name: Create Pull Request
  #       uses: actions/github-script@v6
  #       with:
  #         script: |
  #           const { repo, owner } = context.repo;
  #           const result = await github.rest.pulls.create({
  #             title: '[CI/CD] Release v${{ github.event.inputs.versionName }}',
  #             owner,
  #             repo,
  #             head: 'release/v${{ github.event.inputs.versionName }}',
  #             base: 'master',
  #             body: [
  #               'This PR is auto-generated by',
  #               '[actions/github-script](https://github.com/actions/github-script).'
  #             ].join('\n')
  #           });
  #           github.rest.issues.addLabels({
  #             owner,
  #             repo,
  #             issue_number: result.data.number,
  #             labels: ['release', 'automated', '${{ github.event.inputs.versionName }}']
  #           });

  # update_translations:
  #   name: Update Translations ...
  #   needs: [..., create-release]
  #   uses: ./.github/workflows/update_translations.yml
  #   with:
  #     change_type: 'commit'
  #     branch: 'release/v${{ github.event.inputs.versionName }}'
